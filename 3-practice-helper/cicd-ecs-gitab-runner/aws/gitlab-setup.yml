AWSTemplateFormatVersion: '2010-09-09'
Description: Version 1

Parameters:
  
  EnvironmentName:
    Type: String
    Default: gitlab
    AllowedValues:
      - gitlab
    Description: "A friendly environment name that will be used for namespacing all resources. Example: gitlab"

  GitlabSharedRunnerKey:
    Description: The key from the gitlab repo. Must be groupRunner. Path https://gitlab.com/groups/{your_group_name}/-/runners
    Type: String
    MinLength: 10
    MaxLength: 50

  GitlabHost:
    Description: Gitlab working host
    Default: https://gitlab.com
    Type: String
    MinLength: 2
    MaxLength: 25

  DesiredTasks:
    Type: Number
    Default: 1
    Description: "The number of containers that should be run for the service on the E1 ECS."

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.1.0/24'
    PublicTwo:
      CIDR: '10.0.2.0/24'
    PrivateOne:
      CIDR: '10.0.101.0/24'
    PrivateTwo:
      CIDR: '10.0.102.0/24'

Resources:
  
  ####################################################
  #################     Network    ###################
  ####################################################
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [ 'SubnetConfig', 'VPC', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap [ 'SubnetConfig', 'PublicOne', 'CIDR' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}:PublicOne

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap [ 'SubnetConfig', 'PublicTwo', 'CIDR' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}:PublicTwo

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap [ 'SubnetConfig', 'PrivateOne', 'CIDR' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}:PrivateOne

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: 'AWS::Region' }
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap [ 'SubnetConfig', 'PrivateTwo', 'CIDR' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}:PrivateTwo

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}:Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnetOne'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}:Private

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway'

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetOne
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetTwo
      RouteTableId: !Ref PrivateRouteTable

  ####################################################
  ########### ESC Fargate Cluster  ###################
  ####################################################
  TasksExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}TasksExeRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                  - "iam:PassRole"
                  - "ec2:Describe*"
                  - "ecr:*"
                Resource: "*"

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  GitLabECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${EnvironmentName}-cluster"
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Environment
          Value: gitlab
        - Key: Name
          Value: gitlab

  GitlabLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: GitlabCluster-log-group

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-role-fargate
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "ecs-tasks.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: ECS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:GetRole"
                  - "iam:PassRole"
                  - "ssm:GetParametersByPath"
                  - "ssm:GetParameter"
                  - "ecr:*"
                Resource: "*"

  ####################################################
  ########### Runner Manager setup ###################
  ####################################################

  RunnerManagerTaskApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${EnvironmentName}-runner-mgr-task"
      ExecutionRoleArn: !Ref TasksExecutionRole
      TaskRoleArn: !Ref TaskRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: "512"
      ContainerDefinitions:
        - Name: !Ref EnvironmentName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-runner-manager:latest
          Memory: "512"
          PortMappings:
            - ContainerPort: 22
          Environment:
            - Name: GITLAB_URL
              Value: !Ref "GitlabHost"
            - Name: GITLAB_REGISTRATION_TOKEN
              Value: !Ref "GitlabSharedRunnerKey"
            - Name: FARGATE_CLUSTER
              Value: !Sub ${EnvironmentName}-cluster
            - Name: FARGATE_REGION
              Value: !Sub "${AWS::Region}"
            - Name: FARGATE_SUBNET
              Value: !Ref "PrivateSubnetOne"
            - Name: FARGATE_SECURITY_GROUP
              Value: !Ref "FargateSecurityGroup"
            - Name: FARGATE_TASK_DEFINITION
              Value: !Sub ${EnvironmentName}-runner-default-task
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref GitlabLogGroup
              awslogs-stream-prefix: ecs

  RunnerManagerTaskApiServiceApi:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-api-fargate
      Cluster: !Ref GitLabECSCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref RunnerManagerTaskApi
      DesiredCount: !Ref DesiredTasks
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "DISABLED"
          SecurityGroups:
            - Ref: FargateSecurityGroup
          Subnets:
            - !Ref PrivateSubnetOne
            - !Ref PrivateSubnetTwo

  ####################################################
  ###########      Runner setup    ###################
  ####################################################

  DefaultRunnerTaskApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-runner-default-task
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref "TasksExecutionRole"
      TaskRoleArn: !Ref TaskRole
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: "4GB"
      ContainerDefinitions:
        - Name: 'ci-coordinator' # must be this name, so the Fargate driver can inject the SSH_PUBLIC_KEY environment variable.
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-runner-default:latest
          Memory: "4096"
          PortMappings:
            - ContainerPort: 22
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref GitlabLogGroup
              awslogs-stream-prefix: ecs

  KanikoRunnerTaskApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-runner-kaniko-task
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref "TasksExecutionRole"
      TaskRoleArn: !Ref TaskRole
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: "4GB"
      ContainerDefinitions:
        - Name: 'ci-coordinator' # must be this name, so the Fargate driver can inject the SSH_PUBLIC_KEY environment variable.
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-runner-kaniko:latest
          Memory: "4096"
          PortMappings:
            - ContainerPort: 22
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref GitlabLogGroup
              awslogs-stream-prefix: ecs

  GradleRunnerTaskApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-runner-gradle-task
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref "TasksExecutionRole"
      TaskRoleArn: !Ref TaskRole
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: "4GB"
      ContainerDefinitions:
        - Name: 'ci-coordinator' # must be this name, so the Fargate driver can inject the SSH_PUBLIC_KEY environment variable.
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-runner-gradle:latest
          Memory: "4096"
          PortMappings:
            - ContainerPort: 22
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref GitlabLogGroup
              awslogs-stream-prefix: ecs

  ####################################################
  ###########      Gitlab Role     ###################
  ####################################################

  GitlabUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: ecs-ecs-s3-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:* # need to pull images
                  - s3:*  # need for cache
                  - ecs:* # need for deployment
                  - "iam:GetRole"
                  - "iam:PassRole"
                Resource:
                  - "*"

  GitlabUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref GitlabUser

Outputs:
  AccessKeyID:
    Value: !Ref GitlabUserAccessKey
  SecretAccessKey:
    Value: !GetAtt GitlabUserAccessKey.SecretAccessKey