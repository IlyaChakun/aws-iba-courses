AWSTemplateFormatVersion: '2010-09-09'
Description: Version 9 - Fargate

Parameters:
  EnvironmentName:
    Type: String
    Default: staging
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: dev, qa, staging, or prod"


Resources:

  ### WAF PROTECTION

  DdosRuleGroup:
    Type: 'AWS::WAFv2::RuleGroup'
    Properties:
      Name: !Sub '${EnvironmentName}_DdosRuleGroup'
      Scope: "REGIONAL"
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${EnvironmentName}_DdosRuleGroup'
      Capacity: 5
      Rules:
        - Name: RateLimiting
          Priority: 0
          Action:
            Block: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${EnvironmentName}_RateLimiting'
          Statement:
            RateBasedStatement:
              Limit: 500
              AggregateKeyType: IP

  WafWebAclAssociation:
    Type: "AWS::WAFv2::WebACLAssociation"
    Properties:
      ResourceArn:
        #Here we get loadbalancer by arn, in worst case we may just pass our arn here to test it, as here we only creating waf without other architecture
        Fn::ImportValue: !Sub ${EnvironmentName}:LoadBalancer
      WebACLArn:
        Fn::GetAtt:
          - "WafWebAcl"
          - "Arn"

  WafWebAcl:
    Type: "AWS::WAFv2::WebACL"
    Properties:
      Name: !Sub '${EnvironmentName}_WebACL'
      Scope: "REGIONAL"
      DefaultAction:
        Allow: { } ## to not block requests
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${EnvironmentName}_WebACL'
        SampledRequestsEnabled: true

      Rules:

        - Name: "WAFManualAmazonReputationList"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesAmazonIpReputationList"
          Priority: 0
          OverrideAction:
            None: { }
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${EnvironmentName}_WAFManualAmazonReputationList'
            SampledRequestsEnabled: true

        - Name: "AWSManagedKnownBadInputsRuleSet"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesKnownBadInputsRuleSet"
          Priority: 1
          OverrideAction:
            None: { }
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${EnvironmentName}_AWSManagedKnownBadInputsRuleSet'
            SampledRequestsEnabled: true

        - Name: "DdosRuleGroup"
          Statement:
            RuleGroupReferenceStatement:
              ARN: !GetAtt DdosRuleGroup.Arn
          Priority: 2
          OverrideAction:
            None: { }
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${EnvironmentName}_DdosRuleGroup'
            SampledRequestsEnabled: true

  # WAF MONITORING using CloudWatch
  WebAclLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'aws-waf-logs-${EnvironmentName}'
      RetentionInDays: 120

  LoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      ResourceArn: !GetAtt WafWebAcl.Arn
      LogDestinationConfigs:
        - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:aws-waf-logs-${EnvironmentName}'

