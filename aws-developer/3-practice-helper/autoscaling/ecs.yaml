AWSTemplateFormatVersion: '2010-09-09'
Description: Version 1 - Fargate

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: dev, qa, staging, or prod"

Resources:
  ##################################################################
  #       Security Configuration
  ##################################################################

  # A security group a LoadBalancer that will communicate with our
  # containers.  Communication is allowed over only port 80.  The
  # LoadBalancer will redirect to the containers running on
  # ports 32000-64000, but those don't need to be available on
  # incoming traffic.
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # A security group for the EC2 hosts that will run the containers.
  # Communication is allowed over ports in the range 32000-64000,
  # because those are the ports ECS will randomly assign to
  # our services so they don't conflict.
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 32000
          ToPort: 64000
          CidrIp: 0.0.0.0/0

  # A security group for the EC2 hosts that will run the containers.
  # Communication is allowed over ports in the range 32000-64000,
  # because those are the ports ECS will randomly assign to
  # our services so they don't conflict.
  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  ##################################################################
  #       Role Configuration
  ##################################################################

  # !!!!Service-Link Roles aren't included here.  They are automatically
  # created the first time the CloudFormation template is run.

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communicate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}EC2Role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"

  # This is an IAM role provides permission for ECS to launch containers,
  # and should be added to all ECS Task definitions (ExecutionRoleArn).
  # This role allows access to ECR, logs, and Parameter Store during
  # launch of containers. The permissions for the running service are
  # set by ECS Task definition (TaskRoleArn), which should be created
  # per service
  TasksExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}TasksExeRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                Resource: "*"

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ application-autoscaling.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ##################################################################
  #       Cluster Configuration
  ##################################################################

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}Cluster-log-group

  ##################################################################
  #       Cluster LoadBalancer
  ##################################################################

  # Application Load Balancer for access the service.  ALBTargetGroup will
  # automatically get filled with running Service task that will used for
  # load balancing.
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}ClusterBalancer
      Type: application
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetOne
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetTwo
      SecurityGroups:
        - !Ref LBSecurityGroup

  ALBListenerHttpRedirect:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Host: "#{host}"
            Port: "443"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: HTTP_301
      LoadBalancerArn:
        Ref: ALB
      Port: 8080
      Protocol: HTTP

  ALBListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Unknown route to container.
            StatusCode: 404
      SslPolicy: "ELBSecurityPolicy-TLS-1-2-2017-01"
      Certificates:
        - CertificateArn: "arn:aws:acm:us-east-1:421419650768:certificate/0c0da994-5547-49bb-8ed8-658f53a9a6ab" # todo certificate ARN
      LoadBalancerArn:
        Ref: ALB
      Port: 443
      Protocol: HTTPS


# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub ${EnvironmentName}:ClusterName
  TasksExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'TasksExecutionRole.Arn'
    Export:
      Name: !Sub ${EnvironmentName}:TasksExecutionRole
  ECSServiceAutoScalingRole:
    Description: The ARN of the ECSServiceAutoScalingRole role
    Value: !GetAtt 'ECSServiceAutoScalingRole.Arn'
    Export:
      Name: !Sub ${EnvironmentName}:AutoscalingRole
  LBSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'LBSecurityGroup'
    Export:
      Name: !Sub ${EnvironmentName}:LBSecurityGroup
  ContainerSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
    Export:
      Name: !Sub ${EnvironmentName}:ContainerSecurityGroup
  FargateSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'FargateSecurityGroup'
    Export:
      Name: !Sub ${EnvironmentName}:FargateSecurityGroup
  ApplicationLoadBalancer:
    Description: The domain name that can be used as the URL for the service.
    Value: !Ref "ALB"
    Export:
      Name: !Sub ${EnvironmentName}:LoadBalancer
  LogGroup:
    Description: The LogGroup.
    Value: !Ref "LogGroup"
    Export:
      Name: !Sub ${EnvironmentName}:LogGroup

  HttpsListener:
    Description: The domain name that can be used as the URL for the service.
    Value: !Ref "ALBListenerHttps"
    Export:
      Name: !Sub ${EnvironmentName}:HttpsListener
